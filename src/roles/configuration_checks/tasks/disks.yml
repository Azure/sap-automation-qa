# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

# /*---------------------------------------------------------------------------8
# |                           Disks Collector Tasks                            |
# +------------------------------------4--------------------------------------*/

- name:                                 Disks Collector Tasks
  become:                               true
  block:
    - name:                             Collect azure disks data
      ansible.builtin.uri:
        url:                            http://169.254.169.254/metadata/instance/compute/storageProfile/dataDisks/?api-version=2021-12-13
        use_proxy:                      false
        headers:
          Metadata:                     true
        timeout:                        10
      register:                         disks_metadata
      retries:                          3
      delay:                            2
      ignore_errors:                    true

    - name:                             Collect mount information
      ansible.builtin.shell:
        cmd:                            findmnt -r -n -o TARGET,SOURCE,FSTYPE,OPTIONS
      register:                         mount_info
      changed_when:                     false

    - name:                             Collect disk usage information
      ansible.builtin.shell:
        cmd:                            df -BG
      register:                         df_info
      changed_when:                     false

    - name:                             LVM fullreport
      ansible.builtin.shell:
        cmd:                            /sbin/lvm fullreport --reportformat json
      register:                         lvm_fullreport
      changed_when:                     false
      failed_when:                      false

    - name:                             Collect device-to-lun mapping from Azure symlinks
      ansible.builtin.shell:
        executable:                     /bin/bash
        cmd: |
                                        set -o pipefail
                                        for lun_link in /dev/disk/azure/scsi1/lun*; do
                                          if [ -L "$lun_link" ]; then
                                            lun=$(basename "$lun_link" | sed 's/lun//')
                                            device=$(readlink -f "$lun_link" | xargs basename)
                                            echo "${device}:${lun}"
                                          fi
                                        done
      register:                         device_lun_mapping_raw
      changed_when:                     false
      failed_when:                      false

    - name:                             Parse device-to-lun mapping into dictionary
      ansible.builtin.set_fact:
        device_lun_map: >-
                                        {{
                                          dict(device_lun_mapping_raw.stdout_lines
                                          | map('split', ':')
                                          | map('list'))
                                        }}
      when:
                                        - device_lun_mapping_raw is defined
                                        - device_lun_mapping_raw.stdout_lines | length > 0

    - name:                             Set empty device_lun_map if no mapping found
      ansible.builtin.set_fact:
        device_lun_map:                 {}
      when:                             device_lun_mapping_raw is not defined or device_lun_mapping_raw.stdout_lines | length == 0

    - name:                             Debug device-to-lun mapping
      ansible.builtin.debug:
        var:                            device_lun_map
        verbosity:                      1

    - name:                             Extract disk names
      when:
                                        - disks_metadata is not failed
                                        - disks_metadata.json is defined
      ansible.builtin.set_fact:
        azure_disk_names:               "{{ disks_metadata.json | map(attribute='name') | list }}"

    - name:                             Collect detailed azure disks data (loop per disk defined in azure_disk_names)
      when:
                                        - azure_disk_names is defined
                                        - azure_disk_names | length > 0
      register:                         azure_disks_metadata_results
      loop:                             "{{ azure_disk_names }}"
      delegate_to:                      localhost
      ansible.builtin.shell: |
                                        az disk show --name {{ item }} \
                                        --subscription {{ compute_metadata.json.compute.subscriptionId }} \
                                        --resource-group {{ compute_metadata.json.compute.resourceGroupName }} \
                                        --query "{name:name, sku:sku.name, size:sizeGb, encryption:encryption.type, iops:diskIOPSReadWrite, mbps:diskMBpsReadWrite, size:diskSizeGB, tier:tier}" --output json

    - name:                             Debug azure disks data collected
      when:                             azure_disks_metadata_results is defined
      ansible.builtin.debug:
        var:                            azure_disks_metadata_results
        verbosity:                      1

    - name:                             Check if any NFS filesystem is mounted
      ansible.builtin.set_fact:
        has_nfs_mounts:                 "{{ mount_info.stdout_lines | select('search', '\\snfs[34]?\\s') | list | length > 0 }}"

    - name:                             Check for ANF usage in mount_info, looking for IP addresses
      when:                             has_nfs_mounts | bool
      ansible.builtin.set_fact:
        anf_ip_addresses:               "{{ mount_info.stdout_lines
                                          | map('split', ' ')
                                          | map('list')
                                          | selectattr('1', 'defined')
                                          | map(attribute='1')
                                          | select('match', '^(\\d{1,3}\\.){3}\\d{1,3}:')
                                          | map('regex_replace', '^((\\d{1,3}\\.){3}\\d{1,3}):.*', '\\1')
                                          | list 
                                          | unique }}"
    - name:                             Debug ANF IP addresses found
      when:                             anf_ip_addresses is defined
      ansible.builtin.debug:
        var:                            anf_ip_addresses

    - name:                             Check for AFS usage in mount_info, looking for storage account names
      when:                             has_nfs_mounts | bool
      ansible.builtin.set_fact:
        afs_storage_accounts:           "{{ mount_info.stdout_lines
                                          | map('split', ' ')
                                          | map('list')
                                          | selectattr('1', 'defined')
                                          | map(attribute='1')
                                          | select('match', '\\.(privatelink\\.)?file\\.core\\.windows\\.net:/')
                                          | map('regex_replace', '^.*:/([^/]+)/.*', '\\1')
                                          | list 
                                          | unique }}"

    - name:                             Debug AFS storage account names found
      when:                             afs_storage_accounts is defined
      ansible.builtin.debug:
        var:                            afs_storage_accounts

    - name:                             Collect ANF storage data if NFS is used
      when:
                                        - has_nfs_mounts | bool
                                        - NFS_provider is defined
                                        - "'ANF' in NFS_provider"
                                        - ANF_account_rg is defined
                                        - ANF_account_name is defined
      register:                         anf_storage_metadata_results
      delegate_to:                      localhost
      ansible.builtin.shell:
        executable:                     /bin/bash
        cmd: |
                                        set -o pipefail
                                        printf "["
                                        first=true
                                        for pool in $(az netappfiles pool list \
                                          --resource-group "{{ ANF_account_rg | default(compute_metadata.json.compute.resourceGroupName) }}" \
                                          --account-name "{{ ANF_account_name }}" \
                                          --query '[].name' -o tsv | awk -F/ '{print $NF}'); do
                                            qos=$(az netappfiles pool show \
                                              --resource-group "{{ ANF_account_rg | default(compute_metadata.json.compute.resourceGroupName) }}" \
                                              --account-name "{{ ANF_account_name }}" \
                                              --pool-name "$pool" \
                                              --query "qosType" -o tsv)
                                            for vol in $(az netappfiles volume list \
                                              --resource-group "{{ ANF_account_rg | default(compute_metadata.json.compute.resourceGroupName) }}" \
                                              --account-name "{{ ANF_account_name }}" \
                                              --pool-name "$pool" \
                                              --query '[].name' -o tsv | awk -F/ '{print $NF}'); do
                                                if [ "$first" = true ]; then
                                                  first=false
                                                else
                                                  printf ","
                                                fi
                                                az netappfiles volume show \
                                                  --resource-group "{{ ANF_account_rg | default(compute_metadata.json.compute.resourceGroupName) }}" \
                                                  --account-name "{{ ANF_account_name }}" \
                                                  --pool-name "$pool" \
                                                  --volume-name "$vol" \
                                                  --query "{name:name, id:id, throughputMibps:throughputMibps, provisionedAvailabilityZone:provisionedAvailabilityZone, protocolTypes:protocolTypes, serviceLevel:serviceLevel, qosType:'$qos', ip:mountTargets[0].ipAddress, token:creationToken}" \
                                                  -o json
                                            done
                                        done
                                        printf "]"

    - name:                             Debug ANF storage data collected
      when:                             anf_storage_metadata_results is defined
      ansible.builtin.debug:
        var:                            anf_storage_metadata_results
        verbosity:                      1

    - name:                             Collect AFS storage data if NFS is used
      when:
                                        - has_nfs_mounts | bool
                                        - NFS_provider is defined
                                        - "'AFS' in NFS_provider"
                                        - afs_storage_accounts is defined
                                        - afs_storage_accounts | length > 0
      register:                         afs_storage_metadata_results
      delegate_to:                      localhost
      ansible.builtin.shell:
        executable:                     /bin/bash
        cmd: |
                                        set -o pipefail
                                        for acc in {{ afs_storage_accounts | join(' ') }}; do
                                          sa_info=$(az storage account show --name "$acc" --query "{rg:resourceGroup,name:name,id:id}" -o tsv)
                                          rg=$(echo "$sa_info" | awk '{print $1}')
                                          sid=$(echo "$sa_info" | awk '{print $3}')
                                          dns="$acc.file.core.windows.net"
                                          for sh in $(az storage share-rm list --resource-group "$rg" --storage-account "$acc" \
                                            --query "[?enabledProtocols=='NFS'].[name,accessTier,quotaGiB]" -o tsv); do
                                            name=$(echo "$sh" | awk '{print $1}')
                                            tier=$(echo "$sh" | awk '{print $2}')
                                            quota=$(echo "$sh" | awk '{print $3}')
                                            peip=$(az network private-endpoint list \
                                              --query "[?privateLinkServiceConnections[?privateLinkServiceId=='$sid']].customDnsConfigs[].ipAddresses[]" -o tsv)
                                            for ip in $peip; do
                                              thr=$((100 + ( (quota*4+99)/100 ) + ( (quota*6+99)/100 ) ))
                                              iops=$((quota+3000))
                                              if [ $iops -gt 100000 ]; then iops=100000; fi
                                              echo "{\"Type\":\"AFS\",\"Name\":\"$name\",\"Pool\":\"$acc\",\"ServiceLevel\":\"$tier\",\"ThroughputMibps\":$thr,\"ProtocolTypes\":\"NFS4.1\",\"NFSAddressDNS\":\"$dns:/$acc/$name\",\"NFSAddress\":\"$ip:/$acc/$name\",\"QoSType\":\"Manual\",\"IOPS\":$iops,\"Id\":\"$sid\"}"
                                            done
                                          done
                                        done

    - name:                             Debug AFS storage data collected
      when:                             afs_storage_metadata_results is defined
      ansible.builtin.debug:
        verbosity:                      1
        var:                            afs_storage_metadata_results
