# Enumeration definitions
enums:
  severity:
    - info:                           &info "INFO"
    - high:                           &high "HIGH"
    - low:                            &low "LOW"
    - warning:                        &warning "WARNING"
    - critical:                       &critical "CRITICAL"
    - all_severity:                   &severity [*info, *high, *low, *warning, *critical]

  os_type:
    - suse:                           &suse "SUSE"
    - redhat:                         &redhat "REDHAT"
    - oraclelinux:                    &oraclelinux "OracleLinux"
    - windows:                        &windows "Windows"
    - all_os:                         &os_type [*suse, *redhat, *oraclelinux, *windows]

  os_version:
    - suse_12_3:                      &suse_12_3 "SUSE 12 SP3"
    - suse_12_4:                      &suse_12_4 "SUSE 12 SP4"
    - suse_12_5:                      &suse_12_5 "SUSE 12 SP5"
    - all_versions:                   &all_versions "all"

  hardware_type:
    - vm:                             &vm "VM"
    - hli:                            &hli "HLI"
    - all_hardware:                   &all_hardware [*vm, *hli]

  storage_type:
    premium_storage:                  &premium_storage ["Premium_LRS","UltraSSD_LRS","ANF","PremiumV2_LRS","AFS"]
    anf:                              &anf ["ANF"]

  workload:
    - sap:                            &sap "SAP"
    - all_workload:                   &workload [*sap]

  db:
    - hana:                           &hana "HANA"
    - mssql:                          &mssql "MSSQL"
    - oracle:                         &oracle "Oracle"
    - db2:                            &db2 "Db2"
    - ase:                            &ase "ASE"
    - all_db:                         &db [*hana, *mssql, *oracle, *db2, *ase]

  role:
    - db:                             &db_role "DB"
    - ascs:                           &ascs_role "SCS"
    - ers:                            &ers_role "ERS"
    - app:                            &app_role "APP"
    - webdispatcher:                  &web_dispatch "WEB"
    - pas:                            &pas "PAS"
    - all_role:                       &role [*db_role, *ascs_role, *ers_role, *app_role, *web_dispatch, *pas]

  cluster_type:
    - sbd:                            &sbd "ISCSI"
    - fencing_agent:                  &fencing_agent "AFA"
    - all_fencing_agent:              &cluster_type [*sbd, *fencing_agent]

  collector_type:
    - command:                        &command "command"
    - azure:                          &azure "azure"
    - all_collector_type:             &collector_type [*command, *azure]

  category:
    - package:                        &package_check "Package"
    - vm:                             &vm_check "Virtual Machine"
    - load_balancer:                  &load_balancer_check "Load Balancer"
    - sap:                            &sap_check "SAP"
    - os:                             &os_check "Operating System"
    - all_check_types:                &category [*package_check, *vm_check, *sap_check, *os_check]

  user:
    - root:                           &root "root"
    - sidadm:                         &sidadm "sidadm"
    - all_users:                      &user [*root, *sidadm]

  validator_type:
    - string:                         &string "string"
    - range:                          &range "range"
    - list:                           &list "list"
    - properties:                     &properties "properties"
    - all:                            &validator_type [*string, *range, *list, *properties]

  report:
    - check:                          &check "check"
    - section:                        &section "section"
    - report:                         &report [*check, *section]

checks:
  - id:                               "IC-0040"
    name:                             "Load Balancers Idle Timeout"
    description:                      "Checks the idle timeout of the load balancers"
    category:                         *load_balancer_check
    severity:                         *info
    workload:                         *workload
    applicability:
      os_type:                        [*suse, *redhat, *oraclelinux, *windows]
      os_version:                     *all_versions
      hardware_type:                  *vm
      role:                           *role
      database_type:                  *db
    collector_type:                   *azure
    collector_args:
      command:                        |-
                                      if command -v az >/dev/null 2>&1; then
                                        nic_id=$(az vm show --resource-group {{ CONTEXT.resource_group_name }} --name {{ CONTEXT.vm_name }} --query 'networkProfile.networkInterfaces[0].id' -o tsv 2>/dev/null);
                                        if [ $? -eq 0 ] && [ -n "$nic_id" ] && [ "$nic_id" != "null" ]; then
                                          lb_backend_pools=$(az network nic show --ids "$nic_id" --query 'ipConfigurations[0].loadBalancerBackendAddressPools[0].id' -o tsv 2>/dev/null);
                                          if [ -n "$lb_backend_pools" ] && [ "$lb_backend_pools" != "null" ]; then
                                            load_balancer_id=$(echo "$lb_backend_pools" | grep -oP '.*(?=/backendAddressPools)');
                                            if [ -n "$load_balancer_id" ]; then
                                              echo "$load_balancer_id";
                                            else
                                              echo "No Load Balancer defined";
                                            fi
                                          else
                                            echo "No Load Balancer defined";
                                          fi
                                        else
                                          echo "Error: Failed to retrieve NIC";
                                        fi
                                      else
                                        echo "Error: Azure CLI not available";
                                      fi
    report:                           *check

  - id:                               "IC-0041"
    name:                             "Load Balancers Idle Timeout"
    description:                      "Checks the idle timeout of the load balancers"
    category:                         *load_balancer_check
    severity:                         *high
    workload:                         *workload
    applicability:
      os_type:                        [*suse, *redhat, *oraclelinux, *windows]
      os_version:                     *all_versions
      hardware_type:                  *vm
      role:                           *role
      database_type:                  *db
    collector_type:                   *azure
    collector_args:
      command:                        |-
                                      if command -v az >/dev/null 2>&1; then
                                        nic_id=$(az vm show --resource-group {{ CONTEXT.resource_group_name }} --name {{ CONTEXT.vm_name }} --query 'networkProfile.networkInterfaces[0].id' -o tsv 2>/dev/null);
                                        if [ $? -eq 0 ] && [ -n "$nic_id" ] && [ "$nic_id" != "null" ]; then
                                          lb_backend_pools=$(az network nic show --ids "$nic_id" --query 'ipConfigurations[0].loadBalancerBackendAddressPools[0].id' -o tsv 2>/dev/null);
                                          if [ -n "$lb_backend_pools" ] && [ "$lb_backend_pools" != "null" ]; then
                                            load_balancer_id=$(echo "$lb_backend_pools" | grep -oP '.*(?=/backendAddressPools)');
                                            if [ -n "$load_balancer_id" ]; then
                                              lb_json=$(az network lb show --ids "$load_balancer_id" -o json 2>/dev/null);
                                              if [ $? -eq 0 ] && [ -n "$lb_json" ]; then
                                                idle_timeout=$(echo "$lb_json" | grep -oP '"idleTimeoutInMinutes":\s*\K[0-9]+' | head -1);
                                                floating_ip=$(echo "$lb_json" | grep -oP '"enableFloatingIP":\s*\K(true|false)' | head -1);
                                                protocol=$(echo "$lb_json" | grep -oP '"protocol":\s*"\K[^"]+' | head -1);
                                                probe_interval=$(echo "$lb_json" | grep -oP '"intervalInSeconds":\s*\K[0-9]+' | head -1);
                                                probe_threshold=$(echo "$lb_json" | grep -oP '"numberOfProbes":\s*\K[0-9]+' | head -1);
                                                idle_timeout=${idle_timeout:-N/A};
                                                floating_ip=${floating_ip:-N/A};
                                                protocol=${protocol:-N/A};
                                                probe_interval=${probe_interval:-N/A};
                                                probe_threshold=${probe_threshold:-N/A};
                                                echo "{\"idletimeout\":\"$idle_timeout\",\"floatingip\":\"$floating_ip\",\"protocol\":\"$protocol\",\"probeinterval\":\"$probe_interval\",\"probethreshold\":\"$probe_threshold\"}";
                                              else
                                                echo '{"error": "Failed to retrieve Load Balancer details"}';
                                              fi
                                            else
                                              echo '{"error": "No Load Balancer defined"}';
                                            fi
                                          else
                                            echo '{"error": "No Load Balancer backend pools not found"}';
                                          fi
                                        else
                                          echo '{"error": "Failed to retrieve NIC"}';
                                        fi
                                      else
                                        echo '{"error": "Azure CLI not available"}';
                                      fi
    validator_type:                   *properties
    validator_args:
      properties:
        - name:                       "Idle Timeout"
          property:                   "idletimeout"
          value:                      "30"
        - name:                       "Floating IP"
          property:                   "floatingip"
          value:                      "false"
        - name:                       "Protocols"
          property:                   "protocols"
          value:                      "All"
        - name:                       "Probe Interval"
          property:                   "probeinterval"
          value:                      "15"
        - name:                       "Probe Threshold"
          property:                   "probethreshold"
          value:                      "2"
    report:                           *check
