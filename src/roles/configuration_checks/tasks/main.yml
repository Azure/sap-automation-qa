# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

# /*---------------------------------------------------------------------------8
# |                           Configuration Check                              |
# +------------------------------------4--------------------------------------*/

---
# Get vm name using imds, resource group name and location and set them in system_context

- name:                             Get virtual machine properties from IMDS
  ansible.builtin.uri:
    url:                            http://169.254.169.254/metadata/instance?api-version=2021-02-01
    use_proxy:                      false
    headers:
      Metadata:                     true
    timeout:                        10
  register:                         compute_metadata
  retries:                          3
  delay:                           2
  until:                           compute_metadata is not failed
  ignore_errors:                   true

- name:                             Handle IMDS failure gracefully
  ansible.builtin.set_fact:
    compute_metadata:
      json:
        compute:
          resourceGroupName:        "unknown"
          location:                 "unknown"
          vmSize:                   "unknown"
          osType:                   "{{ ansible_os_family }}"
          zone:                     "unknown"
    imds_available:                 false
    execution_warnings:             "{{ execution_warnings | default([]) + ['IMDS endpoint unavailable - using fallback values'] }}"
  when:                             compute_metadata is failed

- name:                             Set IMDS success flag
  ansible.builtin.set_fact:
    imds_available:                 true
    execution_warnings:             "{{ execution_warnings | default([]) }}"
  when:                             compute_metadata is not failed


- name:                             Prepare system context information for {{check_type.name}}
  ansible.builtin.set_fact:
    system_context:
      vm_name:                      "{{ compute_metadata.json.compute.name }}"
      resource_group_name:          "{{ compute_metadata.json.compute.resourceGroupName }}"
      supported_configurations:     "{{ vm_support }}"
      hostname:                     "{{ inventory_hostname }}"
      os_type:                      "{{ ansible_distribution | upper }}"
      os_version:                   "{{ ansible_distribution_version }}"
      sap_sid:                      "{{ sap_sid | default('') }}"
      database_sid:                 "{{ db_sid | default('') }}"
      database_type:                "{{ platform | default('HANA') }}"
      role:                         "{{ role }}"
      high_availability:            >-
                                    {% if role == 'DB' %}
                                      {{ database_high_availability | default(false) | bool }}
                                    {% elif role in ['SCS', 'ERS', 'PAS', 'APP'] %}
                                      {{ scs_high_availability | default(false) | bool }}
                                    {% else %}
                                      false
                                    {% endif %}
      hardware_type:                "VM"
      storage_type:                 "{{ NFS_provider | default(['Premium_LRS']) }}"
      high_availability_agent:      >-
                                    {% if role == 'DB' %}
                                      {{ database_cluster_type | default("AFA") }}
                                    {% elif role in ['SCS', 'ERS'] %}
                                      {{ scs_cluster_type | default("AFA") }}
                                    {% else %}
                                      "AFA"
                                    {% endif %}

- name:                             Load checks file for {{check_type.name}}
  ansible.builtin.set_fact:
    check_file_content:             "{{ lookup('file', check_type.file_name + '.yml') }}"

- name:                             Parse check file to identify collector types
  ansible.builtin.set_fact:
    parsed_checks:                  "{{ check_file_content | from_yaml }}"

- name:                             Filter checks by collector type
  ansible.builtin.set_fact:
    command_checks:                 "{{ parsed_checks.checks | selectattr('collector_type', 'equalto', 'command') | list }}"
    azure_checks:                   "{{ parsed_checks.checks | selectattr('collector_type', 'equalto', 'azure') | list }}"

- name:                             Convert filtered checks back to YAML
  ansible.builtin.set_fact:
    command_checks_yaml:            "{{ {'checks': command_checks} | to_yaml }}"
    azure_checks_yaml:              "{{ {'checks': azure_checks} | to_yaml }}"
  when:                             command_checks is defined or azure_checks is defined

- name:                             Execute command-based configuration checks
  when:                             command_checks is defined and command_checks | length > 0
  block:
    - name:                         Run command-based configuration checks
      become:                       true
      configuration_check_module:
        check_file_content:         "{{ command_checks_yaml }}"
        context:                    "{{ system_context }}"
        filter_tags:                "{{ tags_filter | default(omit) }}"
        filter_categories:          "{{ categories_filter | default(omit) }}"
        workspace_directory:        "{{ _workspace_directory }}"
        test_group_invocation_id:   "{{ test_group_invocation_id }}"
        test_group_name:            "ConfigurationChecks"
        hostname:                   "{{ ansible_hostname }}"
        parallel_execution:         true
        max_workers:                20
        enable_retry:               true
      register:                     command_check_results
  rescue:
    - name:                         Log command check failure
      ansible.builtin.debug:
        msg:                        "Command-based configuration checks failed {{ command_check_results.msg }}"

- name:                             Execute Azure-based configuration checks
  when:                             azure_checks is defined and azure_checks | length > 0
  block:
    - name:                         Run Azure-based configuration checks
      become:                       true
      delegate_to:                  localhost
      configuration_check_module:
        check_file_content:         "{{ azure_checks_yaml }}"
        context:                    "{{ system_context }}"
        filter_tags:                "{{ tags_filter | default(omit) }}"
        filter_categories:          "{{ categories_filter | default(omit) }}"
        workspace_directory:        "{{ _workspace_directory }}"
        test_group_invocation_id:   "{{ test_group_invocation_id }}"
        test_group_name:            "ConfigurationChecks"
        hostname:                   "{{ ansible_hostname }}"
        parallel_execution:         true
        max_workers:                20
        enable_retry:               true
      register:                     azure_check_results
  rescue:
    - name:                         Log Azure check failure
      ansible.builtin.debug:
        msg:                        "Azure-based configuration checks failed but continuing {{ azure_check_results.msg }}"

- name:                             Merge check results with error handling
  ansible.builtin.set_fact:
    combined_results:               "{{ (command_check_results.check_results | default([])) +
                                        (azure_check_results.check_results | default([])) }}"
    execution_summary:
      total_command_checks:         "{{ command_checks | default([]) | length }}"
      total_azure_checks:           "{{ azure_checks | default([]) | length }}"
      command_checks_executed:      "{{ command_check_results.check_results | default([]) | length }}"
      azure_checks_executed:        "{{ azure_check_results.check_results | default([]) | length }}"
      command_check_failed:         "{{ command_check_results.failed | default(false) }}"
      azure_check_failed:           "{{ azure_check_results.failed | default(false) }}"
      imds_available:               "{{ imds_available | default(true) }}"
      execution_warnings:           "{{ execution_warnings | default([]) }}"
      execution_errors:             "{{ execution_errors | default([]) }}"

- name:                             Set dynamic result variable with metadata
  ansible.builtin.set_fact:
    "{{ check_type.results_var }}": "{{ combined_results }}"
    "{{ check_type.results_var }}_metadata": "{{ execution_summary }}"
