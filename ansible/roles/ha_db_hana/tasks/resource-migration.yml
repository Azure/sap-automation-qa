# /*---------------------------------------------------------------------------
# |                                                                            |
# |                          Manual resource migration                         |
# |                                                                            |
# +--------------------------------------------------------------------------*/
- name:                             "Test Setup Tasks"
  ansible.builtin.include_tasks:    "roles/misc/tasks/test-case-setup.yml"
  run_once:                         true

# /*---------------------------------------------------------------------------
# |                          Pre Validations
# /*---------------------------------------------------------------------------
- name:                             "Pre Validations: DB Nodes"
  become:                           true
  when:                             "'db' in inventory_hostname"
  block:
    - name:                         "Pre Validations: Remove any location_constraints"
      location_constraints:
        action:                     "remove"
        ansible_os_family:          "{{ ansible_os_family | upper}}"
      register:                     location_constraints_results

    - name:                         "Pre Validations: Validate HANA DB cluster status before migrating the HANA DB"
      get_cluster_status:
        operation_step:             "pre_failover"
      register:                     cluster_status_pre
      failed_when:                  cluster_status_pre.primary_node == "" or cluster_status_pre.secondary_node == ""

    - name:                         "Pre Validations on the primary node"
      when:                         ansible_hostname == cluster_status_pre.primary_node
      block:
        - name:                     "Pre Validations: Check if the AUTOMATED_REGISTER parameter is set to true"
          ansible.builtin.shell:
            cmd:                    "{{ commands | selectattr('name', 'equalto', 'automated_register_cmd') | map(attribute=(ansible_os_family | upper)) | first }}"
            executable:             /bin/bash
          register:                 automated_register
          changed_when:             false
          when:                     cluster_status_pre is defined

        - name:                     "Pre Validations: CleanUp any failed resource"
          ansible.builtin.command:  "{{ commands | selectattr('name', 'equalto', 'resource_cleanup_cmd') | map(attribute=(ansible_os_family | upper)) | first }}"
          register:                 cleanup_failed_resource_pre
          changed_when:             cleanup_failed_resource_pre.rc == 0

# /*---------------------------------------------------------------------------
# |                          Test Execution
# /*---------------------------------------------------------------------------
    - name:                         "Test Execution: Crash the primary node."
      when:
        - cluster_status_pre.primary_node != "" and cluster_status_pre.secondary_node != ""
        - ansible_hostname == cluster_status_pre.primary_node
        - cluster_status_pre.status == "running"
        - cluster_status_pre is defined
      block:
        - name:                     "Test Execution: Start timer"
          ansible.builtin.set_fact:
            test_execution_start:   "{{ now(utc=true, fmt='%Y-%m-%d %H:%M:%S') }}"

        - name:                     "Test Execution: Move the resource to the targeted node"
          ansible.builtin.command:  "{{ commands | selectattr('name', 'equalto', 'resource_migration_cmd') | map(attribute=(ansible_os_family | upper)) | first }}"
          register:                 hana_db_resource_migration
          failed_when:              hana_db_resource_migration.rc != 0
          changed_when:             hana_db_resource_migration.rc == 0
        
        - name:                     "Test Execution: Validate HANA DB cluster status after migration."
          when:
            automated_register.stdout != ""
          get_cluster_status:
            operation_step:         "test_execution"
          register:                 cluster_status_test_execution
          retries:                  20
          delay:                    10
          failed_when:              false
          until:                    cluster_status_test_execution.primary_node == cluster_status_pre.secondary_node

        - name:                     "Test Execution: Register Failed Resource"
          become:                   true
          become_user:              "{{ db_sid | lower }}adm"
          when:
            - cluster_status_pre is defined
            - automated_register.stdout == ""
          ansible.builtin.command: |
                                    hdbnsutil -sr_register \
                                    --remoteHost={{ cluster_status_pre.secondary_node }} \
                                    --remoteInstance={{ db_instance_number }} \
                                    --replicationMode=sync --name=SITEB
          register:                 hana_db_register_failed_resource
          changed_when:             hana_db_register_failed_resource.rc == 0

        - name:                     "Test Execution: Remove any location_constraints"
          location_constraints:
            action:                 "remove"
            ansible_os_family:      "{{ ansible_os_family | upper}}"
          register:                 location_constraints_results

        - name:                     "Test Execution: Validate HANA DB cluster status during after removing location constraints."
          get_cluster_status:
            operation_step:         "test_execution"
          register:                 cluster_status_test_execution_1
          retries:                  10
          delay:                    10
          until:                    cluster_status_test_execution_1.primary_node == cluster_status_pre.secondary_node and cluster_status_test_execution_1.secondary_node == cluster_status_pre.primary_node

        - name:                     "Test Execution: Stop timer"
          ansible.builtin.set_fact:
            test_execution_end:     "{{ now(utc=true, fmt='%Y-%m-%d %H:%M:%S') }}"

# /*---------------------------------------------------------------------------
# |                          Post Validations
# /*---------------------------------------------------------------------------
    - name:                         "Post Validations: HA cluster status after migrating the HANA DB"
      when:
        - ansible_hostname == cluster_status_pre.primary_node
        - cluster_status_pre is defined
      block:
        - name:                     "Post Validations: CleanUp any failed resource"
          ansible.builtin.command:   "{{ commands | selectattr('name', 'equalto', 'specific_resource_cleanup_cmd') | map(attribute=(ansible_os_family | upper)) | first }}"
          register:                 cleanup_failed_resource_post
          changed_when:             cleanup_failed_resource_post.rc == 0

        - name:                     "Post Validations: Validate HANA DB cluster status after migrating the HANA DB"
          get_cluster_status:
            operation_step:         "post_failover"
          register:                 cluster_status_post
          failed_when:              cluster_status_post.primary_node == "" or cluster_status_post.secondary_node == ""

        - name:                     "Post Validations: Set test case status"
          delegate_to:              localhost
          failed_when:
            - cluster_status_pre.primary_node != cluster_status_post.secondary_node
            - cluster_status_pre.secondary_node != cluster_status_post.primary_node
          ansible.builtin.set_fact:
            test_case_name:         "{{ item.name }}: {{ virtual_host }}"
            test_case_description:  "{{ item.description }}"
            test_case_status:       "PASSED"
            test_execution_start_time: "{{ test_execution_start }}"
            test_execution_end_time: "{{ test_execution_end }}"
            test_case_message:      "Old primary instance is: {{ cluster_status_pre.primary_node }} \
                                    New primary instance is: {{ cluster_status_post.primary_node }} \
                                    Old secondary instance is: {{ cluster_status_pre.secondary_node }} \
                                    New secondary instance is: {{ cluster_status_post.secondary_node }}"
            test_case_details:      {
                                      "Pre Validations: Remove any location_constraints": "{{ location_constraints_results }}",
                                      "Pre Validations: Validate HANA DB cluster status": "{{ cluster_status_pre }}",
                                      "Pre Validations: Check if the AUTOMATED_REGISTER": "{{ automated_register }}",
                                      "Pre Validations: CleanUp any failed resource": "{{ cleanup_failed_resource_pre }}",
                                      "Test Execution: Move the resource to the targeted node": "{{ hana_db_resource_migration }}",
                                      "Post Validations: CleanUp any failed resource": "{{ cleanup_failed_resource_post }}",
                                      "Post Validations: Validate HANA DB cluster status": "{{ cluster_status_post }}",
                                    }
        
        - name:                     "Post Telemetry Data"
          ansible.builtin.include_tasks: "roles/misc/tasks/post-telemetry-data.yml"
          run_once:                 true

  rescue:
    - name:                         "Post Validations: Set test case status"
      ansible.builtin.set_fact:
        test_case_name:             "{{ item.name }}: {{ virtual_host }}"
        test_case_description:      "{{ item.description }}"
        test_case_status:           "FAILED"
        test_case_message:          "{{ ansible_failed_result }}"
        test_case_details:          "{{ ansible_failed_result }}"
    
    - name:                         "Post Telemetry Data"
      ansible.builtin.include_tasks: "roles/misc/tasks/post-telemetry-data.yml"
      run_once:                     true
